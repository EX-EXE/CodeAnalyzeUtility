using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis;
using System;
using System.Text;
using CodeAnalyzeUtility;

namespace SourceGeneratorProject;

[Generator(LanguageNames.CSharp)]
public partial class SourceGeneratorProject : IIncrementalGenerator
{
    private static readonly string GeneratorNamespace = "SourceGeneratorProject";
    private static readonly string HookAttribute = $"{GeneratorNamespace}.HookAttribute";
    private static readonly string EnumFlagAttribute = $"{GeneratorNamespace}.EnumFlagAttribute";

    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        // SourceGenerator用のAttribute生成
        GenerateAttribute(context);

        // Hook Attribute
        var source = context.SyntaxProvider.ForAttributeWithMetadataName(
            HookAttribute,
            static (node, token) => true,
            static (context, token) => context);

        // CreateSource
        context.RegisterSourceOutput(source, GenerateSource);
    }

    public static void GenerateAttribute(IncrementalGeneratorInitializationContext context)
    {
        context.RegisterPostInitializationOutput(static context =>
        {
            // Enumフック
            context.AddSource($"{HookAttribute}.cs", """
namespace SourceGeneratorProject;
using System;
[AttributeUsage(AttributeTargets.Class, AllowMultiple = false, Inherited = false)]
internal sealed class HookAttribute : Attribute
{
}
[AttributeUsage(AttributeTargets.Property, AllowMultiple = false, Inherited = false)]
internal sealed class EnumFlagAttribute : Attribute
{
}

""");
        });
    }

    public static void GenerateSource(SourceProductionContext context, GeneratorAttributeSyntaxContext source)
    {
        var cancellationToken = context.CancellationToken;
        var semanticModel = source.SemanticModel;
        var typeSymbol = (INamedTypeSymbol)source.TargetSymbol;
        var enumNode = (ClassDeclarationSyntax)source.TargetNode;

        var classInfo = AnalyzeClassInfo.Analyze(typeSymbol, cancellationToken);

        var enumCode = new StringBuilder();
        foreach (var (index,info) in classInfo.GetAnalyzeInfos<AnalyzePropertyInfo>()
            .Where(x => x.Attributes.Where(x => x.Type.FullName.Equals(EnumFlagAttribute)).Any())
            .Select((x,i) => (i,x)))
        {
            enumCode.AppendLine($"\t\t{info.Name} = 1 << {index + 1},");
        }

        var code = $$"""
// <auto-generated/>
{{classInfo.Type.GetNamespaceDefine()}}

partial class {{classInfo.Type.ShortName}}
{
    public enum Flags
    {
        None = 0,
{{enumCode}}
    }
}


""";
        context.AddSource($"{classInfo.Type.FullName}.g.cs", code);
    }

}